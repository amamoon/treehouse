generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod" 
  relationModel         = true 
  modelCase             = "camelCase" 
  modelSuffix           = "Schema" 
  useDecimalJs          = true 
  prismaJsonNullability = true 
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}


model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  availabilities Availability[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EventSession {
  id              String         @id @default(cuid())
  code            String         @unique
  title           String
  description     String?
  startTime       DateTime
  endTime         DateTime
  availabilities  Availability[]
}

model Availability {
  id            String      @id @default(cuid())
  userId        String
  eventSessionId String
  startTime     DateTime
  endTime       DateTime
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  eventSession  EventSession @relation(fields: [eventSessionId], references: [id], onDelete: Cascade)

  @@unique([userId, eventSessionId])
}
